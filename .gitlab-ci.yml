stages:
  - test_latest

test:latest:
  stage: test_latest
  image: julia:latest
  script:
    - which git || (apt-get update -qq && apt-get install --no-install-recommends -qqqy git)
    - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    # - git config --global url."https://gitlab-ci-token:${CI_TEST_ACCESS}@gitlab.sintef.no/".insteadOf "git@gitlab.sintef.no:"
    # - git config --global url."https://gitlab-ci-token:${CI_TEST_ACCESS}@gitlab.sintef.no/".insteadOf "https://gitlab.sintef.no" --add
    # - git clone https://ACCESS_USER:${CI_TEST_ACCESS}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git PiecewiseLinearApprox
    - echo $CI_PROJECT_URL
    - echo $CI_PROJECT_NAME
    # - git clone git@gitlab.sintef.no:juliaopt/piecewiselinearapprox.jl.git PiecewiseLinearApprox
    #- julia -e 'import Pkg; Pkg.develop("PiecewiseLinearApprox"); Pkg.test("PiecewiseLinearApprox"; coverage = true)'
    - julia --project=@. -e "import Pkg; Pkg.test(; coverage = true)"
    - julia --project=coverage -e 'import Pkg; Pkg.instantiate()'
    - julia --project=coverage coverage/coverage-summary.jl


format:
  stage: test_latest
  image: julia:latest
  script:
    - julia -e '@info "Verifying formatting"'
    - | 
      julia --eval '
      import Pkg
      Pkg.add("JuliaFormatter")
      using JuliaFormatter
      properly_formatted = format("./src"; verbose = true)
      #properly_formatted = format_file("./src/convexapprox.jl")
      #properly_formatted = format_file("./src/linopt.jl")
      #properly_formatted = format_file("./src/magnani_boyd.jl")
      #properly_formatted = format_file("./src/PiecewiseLinearApprox.jl")
      #properly_formatted = format_file("./src/plotting_makie.jl")
      #properly_formatted = format_file("./src/plotting.jl")
      #properly_formatted = format_file("./src/types.jl")
      if properly_formatted
        @info "Formatting verified"
      else 
        @info "Formatting failed - some files have not yet been formatted"
      end
      exit(properly_formatted ? 0 : 1)'   
    #- |
    #  julia --eval '
    #  import Pkg
    #  Pkg.add("JuliaFormatter") 
    #  using JuliaFormatter 
    #  properly_formatted = format("./src"; verbose = true)
    #  if properly_formatted
    #    @info "Formatting verified"
    #  else 
    #    @info "Formatting failed - some files have not yet been formatted"
    #  end
    #  exit(properly_formatted ? 0 : 1)
    #  '
     
# Below is the template to run your tests in Julia
# .test_template: &test_definition
  # Uncomment below (and adjust as needed) to run the tests for specific references
  # only, such as the default branch, a `development` branch, and so on:
  # rules:
    # - if: $CI_COMMIT_BRANCH == lh/dev-ci
  #   - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  #   - if: $CI_COMMIT_BRANCH == "development"
  # script:
    # Let's run the tests. Substitute `coverage = false` below, if you do not
    # want coverage results.
    # - julia -e 'using Pkg; Pkg.clone(pwd()); Pkg.build("PiecewiseLinearApprox"); Pkg.test("PiecewiseLinearApprox"; coverage = true)'
    # Comment out below if you do not want coverage results.
    # - julia -e 'using Pkg; Pkg.add("Coverage");
      # import PiecewiseLinearApprox; cd(joinpath(dirname(pathof(PiecewiseLinearApprox)), ".."));
      # using Coverage; cl, tl = get_summary(process_folder());
      # println("(", cl/tl*100, "%) covered")'

# Name a test and select an appropriate image.
# images comes from Docker hub
# test:lts:
#   image: julia:1.6.7
#   <<: *test_definition

# test:latest:
#   image: julia:latest
#   <<: *test_definition

# Maybe you would like to test your package against the development branch:
# test:1.1-dev (not sure there is such an image in docker, so not tested yet):
#  image: julia:v1.1-dev
#  # ... allowing for failures, since we are testing against the development
#  # branch:
#  allow_failure: true
#  <<: *test_definition

# REMARK: Do not forget to enable the coverage feature for your project, if you
# are using code coverage reporting above. This can be done by
#
# - Navigating to the `CI/CD Pipelines` settings of your project,
# - Copying and pasting the default `Simplecov` regex example provided, i.e.,
#   `\(\d+.\d+\%\) covered` in the `test coverage parsing` textfield.

# Example documentation deployment
# pages:
#   image: julia:0.7
#   stage: deploy
#   script:
#     - apt-get update -qq && apt-get install -y git  # needed by Documenter
#     - julia -e 'using Pkg; Pkg.clone(pwd()); Pkg.build("MyPackage");'  # rebuild Julia (can be put somewhere else I'm sure
#     - julia -e 'using Pkg; import MyPackage; Pkg.add("Documenter")'  # install Documenter
#     - julia --color=yes docs/make.jl  # make documentation
#     - mv docs/build public  # move to the directory picked up by Gitlab pages
#   artifacts:
#     paths:
#       - public
#   rules:
# #    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#     - if: $CI_COMMIT_BRANCH == lh/dev-ci

# # WARNING: This template is using the `julia` images from [Docker
# # Hub][3]. One can use custom Julia images and/or the official ones found
# # in the same place. However, care must be taken to correctly locate the binary
# # file (`/opt/julia/bin/julia` above), which is usually given on the image's
# # description page.
# #
# # [3]: https://hub.docker.com/_/julia/

# deploy:
#   stage: deploy
#   script: echo "Define your deployment script!"
#   environment: production

