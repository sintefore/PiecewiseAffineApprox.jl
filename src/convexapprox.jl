defaultpenalty() = :l1
defaultpenalty2D() = :l2
defaultplanes() = 4
defaultbigM() = :linear_big_M

#= 
    Start new typed interface here
=#
"""
    approx(input::FunctionEvaluations{D}, c::Curvature, a::Algorithm; kwargs...)

Return ConvexPWLFunc{D} or ConcavePWLFunc{D} depending on `c`, approximating the `input` points in `D` dimensions

Accepted keyword arguments currently include:
- `optimizer`: JuMP Optimizer
- `planes`: number of (hyper)planes to use for approximation
- `strict`: (TODO: Better name?) `strict ‚àà (:none, :over, :under)`
- `pen`:  the metric used to measure deviation `pen ‚àà (:l1,:l2)`
- `show_res`: TODO:Remove this 
"""
function approx(input, c::Concave, a ; kwargs...)
    cv = approx(FunctionEvaluations(input.points,-input.values),Convex(),a; kwargs...)
    # TODO: Generalize on D (hard coded to 2 for now)
    return PWLFunc{Concave,dims(cv)}(cv.planes)
end
dims(pwl::PWLFunc{C,D}) where {C,D} = D
concave(pwl::PWLFunc{C,D}) where {C<:Convex,D} = PWLFunc(pwl.planes,Concave())
# Using dispatch for specializing on dimensions. If performance were a concern,
# maybe just do branching and call specialized function directly
approx(input::FunctionEvaluations{D}, c::Convex, a ; kwargs...) where D = approx(input, c, a, Val(D); kwargs...)
# Specialized for 1D
function approx(input::FunctionEvaluations{D}, c::Convex, a::Interpol, ::Val{1} ; kwargs...) where D
    defaults = (planes=defaultplanes(), pen=defaultpenalty2D(), strict=:none, show_res=false)
    options = merge(defaults, kwargs)
    # Wrap for now, TODO: move here
    convex_linearization_ipol([i[1] for i in input.points], input.values, options.optimizer; kwargs...)
end

function approx(input::FunctionEvaluations{D}, c::Convex, a::Optimized, ::Val{1} ; kwargs...) where D
    defaults = (planes=defaultplanes(), pen=defaultpenalty2D(), bigM=defaultbigM(), strict=:none, show_res=false)
    options = merge(defaults, kwargs)
    # Wrap until big M issue is solved generally
    # TODO: move here   
    convex_linearization_fit([i[1] for i in input.points], input.values, options.optimizer; kwargs...)
end

"""
    approx(input::FunctionEvaluations{D}, c::Convex, a::Heuristic; kwargs...) where D

Approximate using heuristic for general dimension
Additional keyword arguments:
- `trials`=20
- `itlim`=50,
"""
function approx(input::FunctionEvaluations{D}, c::Convex, a::Heuristic; kwargs...) where D
    x = [p[i] for i in 1:D, p in input.points] 
    z = input.values
    return convex_linearization_mb(x, z; kwargs...) 
end

# General D
function approx(input::FunctionEvaluations{D}, c::Convex, a::Optimized, dims ; kwargs...) where D
    # defaults = (planes=defaultplanes(), pen=defaultpenalty2D(), strict=:above, show_res=false)
    defaults = (planes=defaultplanes(), pen=:l2, strict=:above, show_res=false)
    options = merge(defaults, kwargs)

    ùí´ = input.points
    z = input.values
    z·µñ = Dict(zip(ùí´, z))
    ùí¶ = 1:options.planes
    ‚Ñê‚Çö = 1:length(ùí´[1])    

    M·µá‚Å±·µç = linear_big_M(ùí´, z) 
    

    m = Model()
    @variable(m, ùëßÃÇ[ùí´])
    @variable(m, a[‚Ñê‚Çö, ùí¶])
    @variable(m, b[ùí¶])

    @variable(m, ùë¢[ùí´, ùí¶], Bin)

    if options.pen == :l2 
        @objective(m, Min, sum((z·µñ[p] - ùëßÃÇ[p])^2 for p ‚àà ùí´))
    elseif options.pen == :max
        ùë° = @variable(m)
        @objective(m, Min, ùë°)
        for p ‚àà ùí´
            @constraint(m,  ùë° ‚â• (z·µñ[p] - ùëßÃÇ[p]) )
            @constraint(m,  ùë° ‚â• (ùëßÃÇ[p] - z·µñ[p]) )
        end
    elseif options.pen == :l1
        ùë° = @variable(m, [ùí´])
        @objective(m, Min, sum(ùë°))
        for p ‚àà ùí´
            @constraint(m,  ùë°[p] ‚â• (z·µñ[p] - ùëßÃÇ[p]) )
            @constraint(m,  ùë°[p] ‚â• (ùëßÃÇ[p] - z·µñ[p]) )
        end
    else
        error("Unrecognized/unsupported penalty type $(options.pen)")
    end
     
    for p ‚àà ùí´, k ‚àà ùí¶         
        @constraint(m, ùëßÃÇ[p] ‚â• sum(a[j,k] * p[j] for j in ‚Ñê‚Çö) + b[k])
        @constraint(m, ùëßÃÇ[p] ‚â§ sum(a[j,k] * p[j] for j in ‚Ñê‚Çö) + b[k] + M·µá‚Å±·µç * (1-ùë¢[p,k]))                
    end

    if options.strict == :above
        for p ‚àà ùí´, k ‚àà ùí¶ 
            @constraint(m, z·µñ[p] ‚â• sum(a[j,k] * p[j] for j in ‚Ñê‚Çö) + b[k]) 
        end
    elseif options.strict == :below
        for p ‚àà ùí´, k ‚àà ùí¶ 
            @constraint(m, z·µñ[p] ‚â§ sum(a[j,k] * p[j] for j in ‚Ñê‚Çö) + b[k]) 
        end
    end
    
    for p ‚àà ùí´
        @constraint(m, sum(ùë¢[p,k] for k ‚àà ùí¶) ‚â• 1)
    end    
    # Main.Infiltrator.@exfiltrate()
    set_optimizer(m,options.optimizer)
    optimize!(m)

    if termination_status(m) ‚àâ [MOI.OPTIMAL, MOI.TIME_LIMIT]
        error("Optimization failed $(termination_status(m))")
    end

    if options.show_res
        println("Optimize succeed for $(options.pen)")
        val = objective_value(m)
        println("Objective value = $val")
    end   
    
    a·¥º·µñ·µó = value.(a)
    b·¥º·µñ·µó = value.(b)    
    
    return PWLFunc{Convex,D}([Plane(Tuple(a·¥º·µñ·µó.data[:,k]), b·¥º·µñ·µó[k]) for k ‚àà ùí¶])
end

# Sample the function on a uniform grid within the given bounding box using nsamples in each dimension
function sample_uniform(f::Function, bbox::Vector{<:Tuple}, nsamples)
    dims = length(bbox)
    if dims == 1
        it = LinRange(bbox[dims][1], bbox[dims][2], nsamples)
        x = Tuple.(collect(it))
    else
        it = Iterators.product((LinRange(bbox[d][1], bbox[d][2], nsamples) for d in 1:dims)...)
        x = vec(collect(it)) 
    end
    y = [f(xx) for xx in x]
    return FunctionEvaluations(x, y)
end

"""
    approx(f::Function, bbox::Vector{<:Tuple}, c::Curvature, a::Algorithm;  kwargs...)

Approximate the function using a uniform sampling over the bounding box `bbox`

Additional keyword arguments:
- `nsample`=10
"""
function approx(f::Function, bbox::Vector{<:Tuple}, c::Curvature, a::Algorithm;  kwargs...)
    
    defaults = (nsample=10, planes=defaultplanes()) 
    options = merge(defaults, kwargs)

    samples = max(options.nsample, 3*options.planes)

    return approx(sample_uniform(f, bbox, samples), c, a; kwargs...)
end




#=
    Original interface starts here
=#

"""
    convex_linearization(x, z, optimizer; kwargs...)

Computes a piecewise linear function that approximates the measurements given by `x` and `z`.

# Arguments
- `method::Symbol:=fit`: the method used for approximation
- `dimensions::Integer:=2`: the number of dimensions of the function domain
- `planes::Integer=5`: the number of segments to use 
- `planes::Integer=4`: the number of planes to use in 2D PWL functions
- `strict::Symbol=:none`: defines it is a general approximation, or an overestimation or underestimation
- `pen::Symbol=:l1`: the metric used to measure deviation


"""
function convex_linearization(x, z, optimizer; kwargs...)
    defaults = (;method=:fit, dimensions=1)
    options = merge(defaults, kwargs)

    method = options.method
    dimensions = options.dimensions

    if dimensions == 1
        @assert(length(x) == length(z))
        if method == :fit
            return convex_linearization_fit(x, z, optimizer; kwargs...)
        elseif method == :ipol
            return convex_linearization_ipol(x, z, optimizer; kwargs...)
        else
            error("Unrecognized method $method")
        end
    elseif dimensions >= 2
        if method == :fit
            return convex_ND_linearization_fit(x, z, optimizer; kwargs...)
        end    
    else
        error("Unrecognized number of dimensions $dimensions")
    end    
end
function conv_linear_big_M(x, z)
    N = length(x)
    c·µâÀ¢·µó = (z[N] -z[N-1])/(x[N]-x[N-1])
    return 2 * c·µâÀ¢·µó * (last(x) - first(x)) - maximum(z)    
end

function conv_linear_big_M_ND(x, z)    
    return 2*maximum(z)
end

#convex_linearization(x, z, optimizer; kwargs...)  = 
#    convex_linearization([xx for xx in x], [zz for zz in z], optimizer; kwargs...)

function convex_linearization_fit(x::Vector, z::Vector, optimizer; kwargs...)
  
    defaults = (planes=defaultplanes(), pen=defaultpenalty(), bigM=defaultbigM(), strict=false, start_origin=false, show_res=false)
    options = merge(defaults, kwargs)
  
    N = length(x)
    ùí© = 1:N 
    ùí¶ = 1:options.planes    

    M·µá‚Å±·µç = big_M(x,z, options.bigM)
    
    m = Model()
    @variable(m, ùëßÃÇ[ùí©]) 
    @variable(m, ùëê[ùí¶])
    @variable(m, ùëë[ùí¶]) 
    @variable(m, ùë¢[ùí©,ùí¶], Bin)

    if options.pen == :l2 
        @objective(m, Min, sum((z[i] - ùëßÃÇ[i])^2 for i ‚àà ùí©))
    elseif options.pen == :max
        @variable(m, ùë°)
        @objective(m, Min, ùë°)
        for i ‚àà ùí©
            @constraint(m,  ùë° ‚â• (z[i] - ùëßÃÇ[i]) )
            @constraint(m,  ùë° ‚â• (ùëßÃÇ[i] - z[i]) )
        end
    elseif options.pen == :l1
        @variable(m, ùë°[ùí©])
        @objective(m, Min, sum(ùë°))
        for i ‚àà ùí©
            @constraint(m,  ùë°[i] ‚â• (z[i] - ùëßÃÇ[i]) )
            @constraint(m,  ùë°[i] ‚â• (ùëßÃÇ[i] - z[i]) )
        end
    else
        error("Unrecognized/unsupported penalty type $(options.pen)")
    end

    for i ‚àà ùí©, k ‚àà ùí¶ 
        @constraint(m, ùëßÃÇ[i] ‚â• ùëê[k] * x[i] + ùëë[k])
       
        @constraint(m, ùëßÃÇ[i] ‚â§ ùëê[k] * x[i] + ùëë[k] + M·µá‚Å±·µç * (1-ùë¢[i,k]))       
    end

    if options.strict
        for i ‚àà ùí©, k ‚àà ùí¶ 
            @constraint(m, z[i] ‚â• ùëê[k] * x[i] + ùëë[k])   
        end
    end

    if options.start_origin
        @constraint(m,ùëë[1] == 0.0)
    end

    for i ‚àà ùí©
        @constraint(m, sum(ùë¢[i,k] for k ‚àà ùí¶) ‚â• 1)
    end

    for k ‚àà ùí¶ 
        if k > 1
            @constraint(m, ùëê[k-1] ‚â§ ùëê[k])
        end
    end


    set_optimizer(m,optimizer)
    optimize!(m)

    if termination_status(m) ‚àâ [MOI.OPTIMAL, MOI.TIME_LIMIT]
        error("Optimization failed $(termination_status(m))")
    end

    if options.show_res
        println("Optimize succeed for $(options.pen)")
        val = objective_value(m)
        println("Objective value = $val")
    end
    
    ùëê·¥º·µñ·µó = value.(ùëê)
    ùëë·¥º·µñ·µó = value.(ùëë) 

    return PWLFunc{Convex,1}([Plane(Tuple(ùëê·¥º·µñ·µó[k]), ùëë·¥º·µñ·µó[k]) for k ‚àà ùí¶])
    # return ConvexPWLFunction([ùëê·¥º·µñ·µó[k] for k ‚àà ùí¶], [ùëë·¥º·µñ·µó[k] for k ‚àà ùí¶], minimum(x), maximum(x))
end

function convex_linearization(f::Function, xmin, xmax, optimizer; kwargs...)
    @assert(xmin < xmax)

    defaults = (nsample=10, planes=defaultplanes()) 
    options = merge(defaults, kwargs)

    samples = max(options.nsample, 3*options.planes)

    step = (xmax - xmin) / samples
    x = [i for i in xmin:step:xmax]
    y = [f(xx) for xx in x]
    return convex_linearization(x, y, optimizer; kwargs...)
end

function concave_linearization(x, z, optimizer; kwargs...)
    if (size(x,2) < 2) && (length(first(x)) < 2)
        return ConcavePWLFunction(convex_linearization(x, -z, optimizer; kwargs...))
    else
        return ConcavePWLFunctionND(convex_linearization(x, -z, optimizer; kwargs...))
    end
end

function concave_linearization(f::Function, xmin, xmax, optimizer; kwargs...)
    if (size(x,2) < 2) && (length(first(X)) < 2)
        return ConcavePWLFunction(convex_linearization(x -> -f(x), xmin, xmax, optimizer; kwargs...))
    else
        return ConcavePWLFunctionND(convex_linearization(x -> -f(x), xmin, xmax, optimizer; kwargs...))
    end
end


function convexify(pwl::PWLFunction, optimizer)
    N = length(pwl.x)
    ùí© = 1: N
    x = pwl.x
    z = pwl.z

    m = Model()

    Œ¥‚Å∫ = @variable(m, [ùí©], lower_bound=0)
    Œ¥‚Åª = @variable(m, [ùí©], lower_bound=0)

    @objective(m, Min, sum(Œ¥‚Å∫[i] + Œ¥‚Åª[i] for i ‚àà ùí©))
    for i=2:N-1
        @constraint(m, (z[i] + Œ¥‚Å∫[i] - Œ¥‚Åª[i] - z[i-1] - Œ¥‚Å∫[i-1] + Œ¥‚Åª[i-1]) / 
            (x[i] -x[i-1]) <= (z[i+1] + Œ¥‚Å∫[i+1] - Œ¥‚Åª[i+1] - z[i] - Œ¥‚Å∫[i] + Œ¥‚Åª[i]) / (x[i+1] -x[i]))
    end

    set_optimizer(m,optimizer)
    optimize!(m)
    if termination_status(m) != MOI.OPTIMAL
        error("Optimization failed")
    end

    dp = value.(Œ¥‚Å∫)
    dn = value.(Œ¥‚Åª)

    return ConvexPWLFunction(x, [z[i] + dp[i] - dn[i] for i ‚àà ùí©]) 
end

convexify(x, z, optimizer) =
    convexify(PWLFunction(x,z), optimizer)

function interpolatepw(x, z, optimizer; kwargs...)
    @assert(length(x) == length(z))

    defaults = (planes=defaultplanes(), pen=defaultpenalty())
    options = merge(defaults, kwargs)
   
    N = length(x)
    ùí© = 1:N 

    # Find slopes
    c = [(z[j] -z[i]) / (x[j]-x[i])  for i ‚àà ùí©, j ‚àà ùí©]

    # Calculate penalties
    if options.pen == :l1
        p = [(i < j ? sum(abs(c[i,j] * (x[k] - x[i]) + z[i] - z[k]) for k ‚àà i:j) : 0) for i ‚àà ùí©, j ‚àà ùí©]
    elseif options.pen == :l2
        p = [(i < j ? sum((c[i,j] * (x[k] - x[i]) + z[i] - z[k])^2 for k ‚àà i:j) : 0) for i ‚àà ùí©, j ‚àà ùí©]
    elseif options.pen == :max
        p = [(i < j ? maximum(abs(c[i,j] * (x[k] - x[i]) + z[i] - z[k]) for k ‚àà i:j) : 0) for i ‚àà ùí©, j ‚àà ùí©]
    else
        error("Unrecognized/unsupported penalty $(options.pen)")
    end
    
    m = Model()
    @variable(m, ùë¢[ùí©,ùí©], Bin)

    # Minimize total penalty
    @objective(m, Min, sum(p[i,j] * ùë¢[i,j] for i ‚àà ùí©, j ‚àà ùí©))

    # Number of line segments in interpolant
    @constraint(m, sum(ùë¢[i,j] for i ‚àà ùí©, j ‚àà ùí©) == options.planes )

    # Only forward segments allowed
    for i ‚àà ùí©, j ‚àà ùí© 
        if i >= j 
            @constraint(m, ùë¢[i,j] == 0)
        end
    end 

    # Path modelling
    for j ‚àà ùí©
        @constraint(m, (j > 1 ? sum(ùë¢[i,j] for i ‚àà ùí©) : 1) == (j < N ? sum(ùë¢[j,i] for i ‚àà ùí© ) : 1))
    end

    set_optimizer(m,optimizer)
    optimize!(m)
    if termination_status(m) != MOI.OPTIMAL
        error("Optimization failed")
    end
    
    ùë¢·¥º·µñ·µó = value.(m[:ùë¢])
    x·¥º·µñ·µó = collect(x[i] for i ‚àà ùí©, j ‚àà ùí© if ùë¢·¥º·µñ·µó[i,j] == 1)
    push!(x·¥º·µñ·µó, x[N])
    z·¥º·µñ·µó = collect(z[i] for i ‚àà ùí©, j ‚àà ùí© if ùë¢·¥º·µñ·µó[i,j] == 1)
    push!(z·¥º·µñ·µó, z[N])

    return PWLFunction(x·¥º·µñ·µó, z·¥º·µñ·µó)
end

convex_linearization_ipol(x, z, optimizer; kwargs...) = 
    convexify(interpolatepw(x, z, optimizer; kwargs...),optimizer)

function mat2tuples(x::Matrix)
    return collect(Tuple(x'[:,i]) for i in 1:size(x',2))
end
# mat2tuples2(x::Matrix) = ((Tuple(x[i,:]) for i in 1:size(x,1)))

function tuples2mat(ùí´::Vector{Tuple{Float64, Float64}})
   return reduce(hcat, getindex.(ùí´,i) for i in eachindex(ùí´[1]))
end

function convex_ND_linearization_fit(x::Matrix{Float64}, z, optimizer; kwargs...)
    return convex_ND_linearization_fit(mat2tuples(x), z, optimizer; kwargs...)
end

function big_M(x,z, bigM)
    if bigM == :linear_big_M
        return linear_big_M(x,z)
    elseif  bigM == :conv_linear_big_M_ND
        return conv_linear_big_M_ND(x,z)
    elseif bigM == :conv_linear_big_M
        return conv_linear_big_M(x,z)
    else
        error("Big-M function not available. Options are :linear_big_M, :conv_linear_big_M_ND, and :conv_linear_big_M")
    end
end

function linear_big_M(x,z)
    dims = length(x[1])

    ## calculate extremum points
    x‚Çó  = if dims > 2 minimum.(x) else minimum(x) end
    x·µ§ = if dims > 2 maximum.(x) else maximum(x) end
    
    x‚Çä = [Tuple([x[i]...,z[i]])  for i ‚àà 1:length(x)]        
    
    if dims <= 2 # works only for up to 3 dimensions for now
        ‚Ñã = collect(combinations(x‚Çä, dims+1)) 
        M·µá‚Å±·µç = zeros(length(‚Ñã))
        
        k = 1
        for ‚Ñé ‚àà ‚Ñã 
            if dims == 1
                a = (‚Ñé[2][2]-‚Ñé[1][2])/(‚Ñé[2][1]-‚Ñé[1][1])
                b = ‚Ñé[1][2] - a*‚Ñé[1][1]

                line_f(x,a,b) = a.*x + b
                # extrapolation for corner points
                extremum_values = [line_f(x‚Çó,a,b), line_f(x·µ§, a,b)]                
                M·µá‚Å±·µç[k] = abs(maximum(extremum_values) - minimum(extremum_values))
            elseif dims == 2                
                normal = cross(collect(‚Ñé[1] .- ‚Ñé[2]), collect(‚Ñé[1] .- ‚Ñé[3]))
                d = dot(normal, ‚Ñé[1])
                if sum(abs.(normal) .> 1e-4) ==  dims + 1
                    plane_f(x, normal, d) = abs(normal[3]) > 1e-4 ? (-1/normal[3])*normal[1].*x[1] + normal[2].*x[2] + d : 0.0
                
                    # extrapolation for corner points
                    extremum_values = [plane_f((x‚Çó[1],x‚Çó[2]), normal, d), plane_f((x‚Çó[1],x·µ§[2]), normal, d), plane_f((x·µ§[1], x‚Çó[2]), normal, d), plane_f((x·µ§[1], x·µ§[2]), normal, d)]
                    M·µá‚Å±·µç[k] = abs(maximum(extremum_values) - minimum(extremum_values))
                end
            else                
                error("Big-M not defined for dimensions > 3")
            end
            
            
            k = k+1      
        end             
        return maximum(M·µá‚Å±·µç)    
    else            
        error("Big-M calculation works only for 2 and 3 dimensions.")        
    end
end

@deprecate convex_ND_linearization_fit approx
function convex_ND_linearization_fit(ùí´, z, optimizer; kwargs...)

    defaults = (planes=defaultplanes(), pen=defaultpenalty2D(), strict=:none, show_res=false)
    options = merge(defaults, kwargs)

    z·µñ = Dict(zip(ùí´, z))
    ùí¶ = 1:options.planes
    ‚Ñê‚Çö = 1:length(ùí´[1])    

    M·µá‚Å±·µç = linear_big_M(ùí´, z) 

    m = Model()
    @variable(m, ùëßÃÇ[ùí´])
    @variable(m, a[‚Ñê‚Çö, ùí¶])
    @variable(m, b[ùí¶])

    @variable(m, ùë¢[ùí´, ùí¶], Bin)

    if options.pen == :l2 
        @objective(m, Min, sum((z·µñ[p] - ùëßÃÇ[p])^2 for p ‚àà ùí´))
    elseif options.pen == :max
        ùë° = @variable(m)
        @objective(m, Min, ùë°)
        for p ‚àà ùí´
            @constraint(m,  ùë° ‚â• (z·µñ[p] - ùëßÃÇ[p]) )
            @constraint(m,  ùë° ‚â• (ùëßÃÇ[p] - z·µñ[p]) )
        end
    elseif options.pen == :l1
        ùë° = @variable(m, [ùí´])
        @objective(m, Min, sum(ùë°))
        for p ‚àà ùí´
            @constraint(m,  ùë°[p] ‚â• (z·µñ[p] - ùëßÃÇ[p]) )
            @constraint(m,  ùë°[p] ‚â• (ùëßÃÇ[p] - z·µñ[p]) )
        end
    else
        error("Unrecognized/unsupported penalty type $(options.pen)")
    end
     
    for p ‚àà ùí´, k ‚àà ùí¶         
        @constraint(m, ùëßÃÇ[p] ‚â• sum(a[j,k] * p[j] for j in ‚Ñê‚Çö) + b[k])
        @constraint(m, ùëßÃÇ[p] ‚â§ sum(a[j,k] * p[j] for j in ‚Ñê‚Çö) + b[k] + M·µá‚Å±·µç * (1-ùë¢[p,k]))                
    end

    if options.strict == :above
        for p ‚àà ùí´, k ‚àà ùí¶ 
            @constraint(m, z·µñ[p] ‚â• sum(a[j,k] * p[j] for j in ‚Ñê‚Çö) + b[k]) 
        end
    elseif options.strict == :below
        for p ‚àà ùí´, k ‚àà ùí¶ 
            @constraint(m, z·µñ[p] ‚â§ sum(a[j,k] * p[j] for j in ‚Ñê‚Çö) + b[k]) 
        end
    end
    
    for p ‚àà ùí´
        @constraint(m, sum(ùë¢[p,k] for k ‚àà ùí¶) ‚â• 1)
    end    
    
    set_optimizer(m,optimizer)
    optimize!(m)

    if termination_status(m) != MOI.OPTIMAL
        error("Optimization failed")
    end

    if options.show_res
        println("Optimize succeed for $(options.pen)")
        val = objective_value(m)
        println("Objective value = $val")
    end   
    
    a·¥º·µñ·µó = value.(a)
    b·¥º·µñ·µó = value.(b)    
    
    # TODO: generalize for D (hard coded to 2 for now)
    return PWLFunc{Convex,2}([Plane(Tuple(a·¥º·µñ·µó.data[:,k]), b·¥º·µñ·µó[k]) for k ‚àà ùí¶])

    ##TODO: how to recover the data points from the coefficients?  Check package Polyhedra.    
end    

